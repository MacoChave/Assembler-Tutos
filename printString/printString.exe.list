EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
printString.exe -- emu8086 assembler version: 4.08  
 
[ 3/06/2020  --  00:13:07 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data segment
[   2]    0000: 53 6F 79 20 75 6E 61 20 63 61 64 65   str1 db "Soy una cadena de texto", '$'
                6E 61 20 64 65 20 74 65 78 74 6F 24 
                                                    
[   3]        :                                       ; 13 -> Retorno de carro
[   4]        :                                       ; 10 -> Nueva linea
[   5]    0018: 0D 0A 24                              brake db 13, 10, '$'
[   6]        :                                       ends
[   7]        :                                       stack segment
[   8]    0020: 00 00 00 00 00 00 00 00 00 00 00 00   dw 128 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[   9]        :                                       ends
[  10]        :                                       code segment
[  11]        :                                       printChar MACRO char
[  12]        :                                       mov ah, 02h
[  13]        :                                       mov dl, char
[  14]        :                                       int 21h ; dl <- caracter a imprimir
[  15]        :                                       ENDM
[  16]        :                                       
[  17]        :                                       printString MACRO string
[  18]        :                                       mov ah, 09h
[  19]        :                                       mov dx, offset string
[  20]        :                                       int 21h ; dx <- inicio de cadena de caracteres
[  21]        :                                       ENDM
[  22]        :                                       
[  23]    0120:                                       exitApp PROC
[  24]    0120: B8 00 4C                              mov ax, 4c00h
[  25]    0123: CD 21                                 int 21h
[  26]        :                                       ENDP
[  27]        :                                       
[  28]    0125:                                       start:
[  29]    0125: B8 00 00                              mov ax, data
[  30]    0128: 8E D8                                 mov ds, ax
[  31]    012A: 8E C0                                 mov es, ax
[  32]        :                                       
[  33]    012C: B4 09 BA 00 00 CD 21                  printString str1
[  34]    0133: B4 09 BA 18 00 CD 21                  printString brake
[  35]        :                                       ; 9 -> Identar
[  36]    013A: B4 02 B2 09 CD 21                     printChar 9
[  37]    0140: B4 02 B2 48 CD 21                     printChar 'H' ; Modo caracter
[  38]    0146: B4 02 B2 4F CD 21                     printChar 79 ; Modo decimal del ascii '0'
[  39]    014C: B4 02 B2 4C CD 21                     printChar 4Ch ; Modo hexadecimal del ascii 'L'
[  40]    0152: B4 02 B2 41 CD 21                     printChar 101o ; Modo octal del ascii 'A'
[  41]        :                                       
[  42]    0158: E8 C5 FF                              call exitApp
[  43]        :                                       ends
[  44]        :                                       end start
[  45]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 5B      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 02      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 59      -   check sum (l.byte)
0013: 9A      -   check sum (h.byte)
0014: 05      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 06      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
